---
version: "3.8"

services:
  # This service runs dagster-webserver. It has no user code; instead it loads its
  # jobs from the gRPC server running in the usercode service.
  # Because our instance uses the QueuedRunCoordinator, any runs submitted from
  # the webserver will be put on a queue and later dequeued and launched by
  # the dagster-daemon service.
  webserver:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./Dockerfile
      target: webserver
    image: "$REGISTRY_URL/nbmdagster/webserver:$GIT_REV"
    container_name: nbmdagster_webserver
    command: "dagster-webserver -h 0.0.0.0 -p 3000 -w workspace.yaml"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_DB: "$DAGSTER_POSTGRES_DB"
      DAGSTER_POSTGRES_HOSTNAME: "$DAGSTER_POSTGRES_HOSTNAME"
      DAGSTER_POSTGRES_PASSWORD: "$DAGSTER_POSTGRES_PASSWORD"
      DAGSTER_POSTGRES_USER: "$DAGSTER_POSTGRES_USER"
    depends_on:
      - usercode
    x-aws-role:
      Statement:
        - Effect: "Allow"
          Action:
            - "ecs:DescribeTasks"
            - "ecs:StopTask"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "iam:PassRole"
          Resource:
            - "*"
          Condition:
            StringLike:
              iam:PassedToService: "ecs-tasks.amazonaws.com"

  # This service runs the dagster-daemon process, which is responsible for
  # taking runs off of the queue and launching them, as well as creating
  # runs from schedules or sensors.
  daemon:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./Dockerfile
      target: dagster
    image: "$REGISTRY_URL/nbmdagster/daemon:$GIT_REV"
    container_name: nbmdagster_daemon
    command: "dagster-daemon run"
    environment:
      DAGSTER_POSTGRES_DB: "$DAGSTER_POSTGRES_DB"
      DAGSTER_POSTGRES_HOSTNAME: "$DAGSTER_POSTGRES_HOSTNAME"
      DAGSTER_POSTGRES_PASSWORD: "$DAGSTER_POSTGRES_PASSWORD"
      DAGSTER_POSTGRES_USER: "$DAGSTER_POSTGRES_USER"
    depends_on:
      - usercode
    x-aws-role:
      Statement:
        - Effect: "Allow"
          Action:
            - "ec2:DescribeNetworkInterfaces"
            - "ecs:DescribeTaskDefinition"
            - "ecs:DescribeTasks"
            - "ecs:ListAccountSettings"
            - "ecs:RegisterTaskDefinition"
            - "ecs:RunTask"
            - "ecs:TagResource"
            - "secretsmanager:DescribeSecret"
            - "secretsmanager:ListSecrets"
            - "secretsmanager:GetSecretValue"
          Resource:
            - "*"
        - Effect: "Allow"
          Action:
            - "iam:PassRole"
          Resource:
            - "*"
          Condition:
            StringLike:
              iam:PassedToService: "ecs-tasks.amazonaws.com"

  # This service runs a gRPC server that serves information about your
  # definitions. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container.
  # Multiple containers like this can be deployed separately - each needs to
  # run on its own port and have its own entry in the workspace.yaml file.
  usercode:
    platform: linux/amd64
    build:
      context: .
      dockerfile: ./Dockerfile
      target: usercode
    image: "$REGISTRY_URL/nbmdagster/usercode:$GIT_REV"
    container_name: nbmdagster_usercode
    command: "dagster api grpc -h 0.0.0.0 -p 4000 -f defs.py"
    ports:
      - "4000:4000"
    environment:
      DAGSTER_POSTGRES_DB: "$DAGSTER_POSTGRES_DB"
      DAGSTER_POSTGRES_HOSTNAME: "$DAGSTER_POSTGRES_HOSTNAME"
      DAGSTER_POSTGRES_PASSWORD: "$DAGSTER_POSTGRES_PASSWORD"
      DAGSTER_POSTGRES_USER: "$DAGSTER_POSTGRES_USER"
      DAGSTER_CURRENT_IMAGE: "$REGISTRY_URL/nbmdagster/usercode"
      DAGSTER_GLUE_JOB : "$DAGSTER_GLUE_JOB"
